EPSILON_TREE 

(* S ::= 'a' { '+' 'a' } . *)

(* S ::= ('a' | 'b' | 'g')('c' | 'd' | 'h' ). *)

(* S ::= 'a''c' | 'a' 'd' | 'a' 'h' | 'b' 'c' | 'b' 'd' | 'b' 'h' |
        'g' 'c' | 'g' 'd' | 'g' 'h' . *)

(* S ::= E R .
   E ::= 'a' | 'b' | 'g' .
   R ::= 'c' | 'd' | 'h' . *)

(* rule ::= 'fred' . *)

(* rule ::= 'a' name1 | B | 'b1' . 
   name1 ::= 'fred' .
   B ::= 'c' . *)

(* rule ::= 'a' ( 'b' | B ) 'c' .
   B ::= 'd' . *)

(* rule ::= {'a'}'b' . *)

(* rule ::= ('a' | 'c'){'a'|'c'}. *)

(* rule ::= <'a'>. *)

(* rule ::= ('a' | 'b')0@8# . *)

(* rule ::= (INTEGER)2@8'+' . *)

(* rule ::= ID '(' (ID)0@0',' ')' . *)

(* e1 ::= e2 {'+' e2 | '-' e2 } .         
   e2 ::= e3 {'*' e3 | '/' e3 } .
   e3 ::= '+' e4 | '-' e4 |  e4 .
   e4 ::= ID | INTEGER | '(' e1 ')' . *)

(* s ::= 'b' A 'a' .
   A ::= ['a'] . *)

S ::= 'if' B 'then' S X | 'STOP' | 'SKIP' .
X ::= ['else' S] .
B ::= 'true' | 'false' .


